{"version":3,"sources":["manfood.svg","Components/Forms.js","Components/Footer.js","Components/Results.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Forms","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","change","e","setState","input","target","value","handleSubmit","preventDefault","getRestaurants","state","react_default","a","createElement","className","onSubmit","type","onChange","name","id","placeholder","disabled","Component","Footer","React","Results","document","querySelector","scrollIntoView","block","behavior","console","log","searchResults","map","restaurant","key","user_rating","aggregate_rating","cuisines","location","address","average_cost_for_two","href","url","Components_Footer","App","typeCuisine","_ref","asyncToGenerator","regenerator_default","mark","_callee","cuisine","wrap","_context","prev","next","axios","method","dataType","headers","user-key","params","entity_id","q","sent","data","restaurants","t0","message","stop","_x","apply","arguments","cuisineData","src","manfood","alt","Components_Forms","length","Components_Results","Boolean","window","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a510d01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/manfood.ccc05ff9.svg\";","import React, { Component } from 'react';\n\n\n\n\n\nclass Forms extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            input: \"\"\n        }\n    }\n    change = (e) => {\n        this.setState({\n            input: e.target.value\n        });\n\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.getRestaurants(this.state.input)\n            this.setState({\n                input: \"\",\n            })\n            \n    }\n\n\n    render() {\n        return (\n            <form className=\"Form-header Wrapper\" onSubmit={this.handleSubmit}>\n                <input className=\"Input\" type=\"text\" onChange={this.change} name=\"cuisine\" id=\"input\" value={this.state.input} placeholder=\"cuisine type\" />\n                <button disabled={this.state.input === '' ? true : false}>Get restaurants</button>\n            </form>\n        );\n    }\n\n\n\n};\n\n\n\n\n\n\n\n\nexport default Forms;","import React from 'react';\n\nclass Footer extends React.Component {\n    render() {\n        return (\n            <div className=\"Footer\">\n                <h4>Copyright Â© 2019 Yummy Tummy | API: Zomato</h4>\n                \n            </div>\n        );\n\n\n    }\n};\n\n\nexport default Footer;","import React, { Component } from 'react';\nimport Footer from './Footer';\n\nclass Results extends Component{\n\n    componentDidMount() {\n        const element = document.querySelector('#search');\n        element.scrollIntoView({\n            block: 'start',\n            behavior: 'smooth',\n        })\n    }\n\n    render() {\n        console.log(this.props);\n        return (\n     <div>\n         <div className=\"Wrapper\">\n                <h2 className=\"Results-title\" id=\"search\">Your Restaurant Search Results</h2>\n            <div className=\"Search\" > \n\n            {this.props.searchResults.map(restaurant => {\n                return(\n                \n                 <div className=\"Results Wrapper\" key={restaurant.restaurant.id}>\n                     <div className=\"Title-rating\">\n                         <h3>{restaurant.restaurant.name}</h3>\n                        <p>Rating: {restaurant.restaurant.user_rating.aggregate_rating}</p>\n                     </div>\n                     \n                    <div className=\"Details\">\n                        <p className=\"Type\">{restaurant.restaurant.cuisines}</p>\n                        <p>{restaurant.restaurant.location.address}</p>\n                        <p className=\"Cost\">Average Cost for Two: ${restaurant.restaurant.average_cost_for_two}</p>\n                        <button className=\"Info-button\"><a href={restaurant.restaurant.url}>More Info</a></button>\n                     </div> \n                </div>\n                              )\n                          })}\n                         \n            </div>\n                <div className=\"Top\"><a href=\"#input\">New Search <span className=\"Icon\">< i className=\"fas fa-arrow-up\"></i></span> </a></div>\n               \n         </div>\n      <Footer/>\n     </div>\n         \n        );\n       \n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default Results;","import React, { Component } from 'react';\nimport Forms from './Components/Forms';\nimport Results from './Components/Results';\n// import Footer from './Components/Footer';\nimport manfood from './manfood.svg';\nimport './App.css';\nimport axios from 'axios';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      cuisineData: [],\n      searchResults: [],\n    }\n  }\n  \n  typeCuisine = async (cuisine) => {\n\n\n    try {\n      const searchResults = await axios({\n        url: `https://developers.zomato.com/api/v2.1/search`,\n        method: 'GET',\n        dataType: 'json',\n        headers: {\n          'user-key': '0968faa2918c801deb6840af027c61de'\n        },\n        params: {\n          entity_id: 89,\n          q: cuisine\n        }\n      })\n     \n      this.setState({\n        searchResults: searchResults.data.restaurants\n      })\n\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n\n  render() {\n    return (\n      <div>\n        <header className=\"App-header\"> \n          <h1>yummy tummy</h1>\n          <p>Enter a type of Cuisine to find Restaurants in Greater Toronto and neighbouring locations.</p>\n              <img src={manfood} className=\"Man\" alt=\"Man with food\" />\n              <Forms getRestaurants={this.typeCuisine} />\n           \n        </header>\n          <main>\n            \n              {this.state.searchResults.length === 0 ? '' : <Results searchResults={this.state.searchResults} />}\n            \n          </main>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}